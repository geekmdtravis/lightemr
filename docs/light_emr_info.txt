====================================================================
LightEMR: Development Notes
====================================================================
PURPOSE: LightEMR is intended to be an ultra-light-weight EMR
that can be run on devices such as the Raspberry Pi. It is 
intended to be run in developing countries, so HIPAA compliance
and the advanced methods to protect PHI is not a current focus. 
The hope is that for a relatively low overhead and very low 
energy requirements that a local or aid clinician will be able
to utilize this tool to provide faster, more complete care and 
allow for a simple method by which one might collect and utilize
structured data. 

====================================================================

GOALS: 
1. This is going to be completely CLI based
2. No unnecessary pages or keystrokes. 
3. C is the preferred language for simplicity,
   portability, and efficiency. Modules in 
   other languages will be considered, however,
   where appropriate. Python as a 4GL will likely
   have some utility with regard to creating an
   intelligent note-writing tool.
4. Initial focus is for outpatient setting.
5. Modularize the program in such a way that simple
   command lines can also be run directly from a 
   shell prompt to quickly input and retrieve patient
   information. E.g. "./note --find-last --patient-id 
   5555555555". Or "./note --search --patient-id 5555555555
   --keyword CHF".

====================================================================

Table of Contents
SECTION A: Description of major modules
   1. Patient lookup
   2. Patient add
   3. Patient remove
   4. Help
   5. Clinical tools
   6. Billing
   7. Exit
   
SECTION B: Patient Object
 

Section A: Topic 1 - Patient Lookup
-----------------------------------
For this section, a clinician should be able to lookup a patient by 
(a) name, (b) dob, (c) person identification number. From this point
a located patient can have basic  clinical documentation input and 
extracted from the EMR. Medical history, prior notes, lab values, 
vital signs, medications are all things that should be associated with
the patient and which a clinician can add or update.  This is basically
the main module through which a clinician will interact with a patients
health record.

Section A: Topic 2 - Patient add
-----------------------------------
This will be a very simple screen at first. Literally for every field
available under the pateint object struct, there will be a one-line
prompt. On initial implementation, a patient will be added to the 
database and then the user will return to the main screen. 

Alternatively, might include a prompt which effectively does the
"patient lookup" equivalent action and takes the user to a place
where he can document patient data for the patient just entered.

Section A: Topic 3 - Patient remove
-----------------------------------
Very simple, remove from the database and return to the main screen. 
Future iterations may have the ability to remove the "active" patient
but first iteration will require that the patinet be searched for and 
removed by entering the last name and then the MRN.

Section A: Topic 4 - Help
-----------------------------------
Text-based teaching module which walks the user through each of
the program modules.

Section A: Topic 5 - Clinical Tools
-----------------------------------
This is a simple way to calculate stuff like anion gap, wells criteria,
ransons, etc. Tests will be categorized by specialty, organ system, and 
by name in the end. First iteration will likely just be name. 

Section A: Topic 6 - Billing
-----------------------------------
Not yet implemented. But, this will be a very simple leger and nothing 
more. There will be no support for credit card transactions, insurance
adjustments, etc. 

Section A: Topic 7 - Exit
-----------------------------------
Exit.

